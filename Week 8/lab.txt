1)
-wget the web page
http://cs.ucla.edu/classes/fall13/cs35L/assign/sthttpd-2.26.4.tar.gz
-run gunzip on the tar file
-tar xvf sthttpd-2.26.4.tar.gz
-open a diff file and patch the diff code into it
-apply the code using the command patch -p1 < patch.diff
-now configure it using ./configure CFLAGS="-g"
-and now type make
- run it on port (12221 to 12280). I chose 12255  using the command ./thttpd -p 12255
-ps ux to see all the processes you're trying to run

2)
It does work in the normal case

3)
-open another terminal to send the crashing request using wget
http://localhost:12255/AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-wget http://localhost:12255
-vim into index.html to see the web page

-gdb thttpd PID
PID is the process ID when using ps ux which is located in the second column
-you should see all the standard libraries

When you do this the server will stop so you need to continue it with
c

wget http://localhost:12255/AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
overflow it with about 2000A's to create a crash
do this on one window

4)
If you stayed in gdb on another window and did a backtrace then you would see
all the errors and a segfault

0000356f67bb27 in _int_realloc () from /lib64/libc.so.6
(gdb) #7  0x000000356f67bce5 in realloc () from /lib64/libc.so.6
(gdb) #8  0x000000356f66f2e4 in _IO_mem_finish () from /lib64/libc.so.6
(gdb) #9  0x000000356f6666e7 in fclose@@GLIBC_2.2.5 () from /lib64/libc.so.6
(gdb) #10 0x000000356f6e4cd9 in __vsyslog_chk () from /lib64/libc.so.6
(gdb) #11 0x000000356f67074e in __libc_message () from /lib64/libc.so.6
(gdb) #12 0x000000356f676126 in malloc_printerr () from /lib64/libc.so.6
(gdb) #13 0x000000356f67bb27 in _int_realloc () from /lib64/libc.so.6
(gdb) #14 0x000000356f67bce5 in realloc () from /lib64/libc.so.6
(gdb) #15 0x000000356f66f2e4 in _IO_mem_finish () from /lib64/libc.so.6
(gdb) #16 0x000000356f6666e7 in fclose@@GLIBC_2.2.5 () from /lib64/libc.so.6
(gdb) #17 0x000000356f6e4cd9 in __vsyslog_chk () from /lib64/libc.so.6
(gdb) #18 0x000000356f67074e in __libc_message () from /lib64/libc.so.6
(gdb) #19 0x000000356f676126 in malloc_printerr () from /lib64/libc.so.6
(gdb) #20 0x000000356f67bb27 in _int_realloc () from /lib64/libc.so.6
(gdb) #21 0x000000356f67bce5 in realloc () from /lib64/libc.so.6
(gdb) #22 0x000000356f66f2e4 in _IO_mem_finish () from /lib64/libc.so.6

5) What happens is that you overflow the heap when reading all the A's. When
you allocate memory onto the heap, you are overwriting the book keeping of the
pointers which is next to the buffer. When you mess with the pointers due to 
overflowing the buffer and you are freeing a chunk a memory, you might be freeing
invalid memory or memory that the heap is trying to keep track of. This is
because free does not tell how many bytes to free, the book keeping does that.
When we changed the code, we took out the fact that we are reading hc->read_size 
- hc->read_idx size of memory. Without this, it would overflow the buffer. 

To build a remote exploit for the heap, you should not randomly try to overflow 
the heap. You need to put a jump command in the proper place when overwriting the 
heap that will jump to the beginning of your exploit code. The heap is full of 
pointers, but when it frees a certain position, you have a problem. 
You have to go through the heap which works like a linked list and insert your 
exploit code, most preferably a jump that will go to your exploit code. 
This exploit code could be anything such as opening a shell with admin privleges
or a simple function that does what you want to do. 

To build a remote exploit for the stack, you could do something along the same
lines of causing a buffer overflow and smashing the stack. You would put your
exploit code and overwrite the return address with the address to the start of
your buffer.

6)
Run 
gcc -m32 -c -S -o thttpd-nostackprot.s -fno-stack-protector -I . -I
../ thttpd.c
to generate assembly code with no stack protection

and 
gcc -m32 -c -S -o thttpd-stackprot.s -fstack-protector -I . -I ../ thttpd.c
to generate assembly code with stack protection

7) start valgrind with ./thttp -p 12255
ps ux to see the PID
valgrind ./thttpd -p 12255
Then send in the localhost error with a lot of A's from a another terminal and valgrind will show the
error automatically


==4527== Memcheck, a memory error detector
==4527== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==4527== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==4527== Command: ./thttpd -p 12255
==4527== 
==4527== 
==4527== HEAP SUMMARY:
==4527==     in use at exit: 0 bytes in 0 blocks
==4527==   total heap usage: 12 allocs, 12 frees, 3,318 bytes allocated
==4527== 
==4527== All heap blocks were freed -- no leaks are possible
==4527== 
==4527== For counts of detected and suppressed errors, rerun with: -v
==4527== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
[calvinl@lnxsrv02 ~/Desktop/CS35L/Week8/sthttpd-2.26.4/src]$ ==4530== Syscall
param read(buf) points to unaddressable byte(s)
==4530==    at 0x356F6DB630: __read_nocancel (in /lib64/libc-2.12.so)
==4530==    by 0x40479B: main (thttpd.c:1601)
==4530==  Address 0x4c6be51 is 0 bytes after a block of size 2,001 alloc'd
==4530==    at 0x4A06BE0: realloc (vg_replace_malloc.c:662)
==4530==    by 0x406427: httpd_realloc_str (libhttpd.c:715)
==4530==    by 0x404776: main (thttpd.c:1596)
==4530== 
--4530-- VALGRIND INTERNAL ERROR: Valgrind received a signal 11 (SIGSEGV) -
exiting
--4530-- si_code=80;  Faulting address: 0x0;  sp: 0x402f04de0

valgrind: the 'impossible' happened:
   Killed by fatal signal
==4530==    at 0x3803EC04: vgPlain_arena_malloc (m_mallocfree.c:291)
==4530==    by 0x3800386A: vgMemCheck_realloc (mc_malloc_wrappers.c:490)
==4530==    by 0x3807A0AD: vgPlain_scheduler (scheduler.c:1673)
==4530==    by 0x380A5A19: run_a_thread_NORETURN (syswrap-linux.c:103)

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable
==4530==    at 0x4A06BE0: realloc (vg_replace_malloc.c:662)
==4530==    by 0x406427: httpd_realloc_str (libhttpd.c:715)
==4530==    by 0x40B32C: httpd_parse_request (libhttpd.c:2014)
==4530==    by 0x4047E1: main (thttpd.c:1639)


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

8)
run the command make CC="gcc -m32" CFLAGS="-fsanitize=address
-fstack-protector" LDFLAGS="-Xlinker --rpath=/usr/local/cs/gcc-$(gcc
-dumpversion)/lib" 

I had to make clean and make check and run this command again as the makefile
was creating errors and would not compile

When I did everything the same way as in step 4, and I ran a backtrace in gdb,
there was no stack. This is because fsanitize kills the process since it
knows theres an error with the fsanitize option instead of letting it crash
and producing error messages.

9)
gcc -m32 -c -S -o thttpd-sanitize.s -fsanitize=address -fstack-protector -I . -I ../ thttpd.c

Had a problem where I had to change my start up shell script to put the
beginning of my path as /usr/local/cs/bin otherwise the fsanitize option would
not work. 

After creating the sanitize.s file, I used:

diff thttpd-sanitize.s thttpd-stackprot.s > compare.txt
The sanitize.s looks less efficient because it has a significant amount of
assembly instructions compared to stackprot.s. Sanitize code is more complex because it removes relative addressing. This is another reason  that stackport.s is
more efficient than sanitize.s


